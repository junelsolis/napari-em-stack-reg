"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""

from typing import TYPE_CHECKING

# from magicgui import magic_factory
# from magicgui.widgets import (
#     CheckBox,
#     Container,
#     TextEdit,
#     create_widget,
# )
from napari.layers import Image

# from qtpy.QtCore import Qt
from qtpy.QtWidgets import (
    QFrame,
    # QHBoxLayout,
    QLabel,
    # QMainWindow,
    QPushButton,
    # QScrollArea,
    QVBoxLayout,
    QWidget,
)

from napari_em_stack_reg.tools.register import StackableImage


if TYPE_CHECKING:
    import napari


# if we want even more control over our widget, we can use
# magicgui `Container`
class EMRegistrationWidget(QWidget):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer

        self._stack_details = QLabel("No image layer found.")
        self._stack_details.setWordWrap(True)

        self._begin_button = QPushButton("Begin")
        self._begin_button.hide()

        self._update_stack_details()

        self.setLayout(QVBoxLayout())
        self.layout().addWidget(self._stack_details)

        self._divider = QFrame()
        self._divider.setFrameShape(QFrame.HLine)
        self._divider.setFrameShadow(QFrame.Sunken)
        self.layout().addWidget(self._divider)
        self.layout().addWidget(self._begin_button)

        self._viewer.layers.events.inserted.connect(self._on_layer_inserted)
        self._viewer.layers.events.removed.connect(self._on_layer_removed)

        self._begin_button.clicked.connect(self._on_begin_button_clicked)

    def _on_layer_inserted(self):
        self._update_stack_details()
        self._begin_button.show()

    def _on_layer_removed(self):
        self._update_stack_details()
        self._begin_button.hide()

    def _on_begin_button_clicked(self):
        # print("Begin button clicked")

        self._begin_button.hide()
        stackable_img = StackableImage(self._viewer)
        stackable_img.get_registration_images()

        for layer in self._viewer.layers:
            layer.events.transform.connect(self._on_transform_changed)

    def _on_transform_changed(self, event):
        print("Transform changed")

    def _update_stack_details(self):
        # print("this")
        image_layer = next(
            (
                layer
                for layer in self._viewer.layers
                if isinstance(layer, Image)
            ),
            None,
        )

        if image_layer is not None:
            self._stack_details.setText(
                f"Stack details:\n\nshape: {image_layer.data.shape}\ndtype: {image_layer.data.dtype}"
            )
        else:
            self._stack_details.setText("No image layer found.")
